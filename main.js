!function(){"use strict";var e={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__submit",inactiveButtonClass:"popup__submit_inactive",inputError:"popup__input_type_error",errorClass:"popup__input-error_active"},t=document.querySelector(".profile"),n=t.querySelector(".profile__avatar-wrap"),r=t.querySelector(".profile__edit"),o=t.querySelector(".profile__add"),i=document.querySelector(".popup_window_avatar").querySelector(".popup__form"),a=document.querySelector(".popup_window_edit"),c=a.querySelector(".popup__form"),u=a.querySelector(".popup__input_type_name"),s=a.querySelector(".popup__input_type_occupation"),l=document.querySelector(".popup_window_add").querySelector(".popup__form");function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var p=function(){function e(t,n,r,o,i,a){var c=t.name,u=t.link,s=t.likes,l=t._id,f=t.owner;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._title=c,this._src=u,this._alt="picture of "+c,this._likes=s,this._id=l,this._owner=f,this._cardSelector=n,this._userId=r,this._handleImageClick=o,this._handleDeleteClick=i,this._handleLikeClick=a}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector("#".concat(this._cardSelector)).content.querySelector(".".concat(this._cardSelector)).cloneNode(!0)}},{key:"generateCard",value:function(){return this._card=this._getTemplate(),this._setEventListeners(),this._card.querySelector(".place__title").textContent=this._title,this._card.querySelector(".place__image").src=this._src,this._card.querySelector(".place__image").alt=this._alt,this._card.querySelector(".place__like-counter").textContent=this._likes.length,this._checkIfCardLiked(this._likes)&&this._toggleLikeCard(this._card.querySelector(".place__like")),this._hideDeleteBtn(),this._card}},{key:"_setEventListeners",value:function(){var e=this;this._card.addEventListener("click",(function(t){t.target.classList.contains("place__delete")?e._handleDeleteClick(e._id,e._card):t.target.classList.contains("place__like")?t.target.classList.contains("place__like_theme_like")?e._handleLikeClick(!1,t.target):e._handleLikeClick(!0,t.target):t.target.classList.contains("place__image")&&e._handleImageClick(t)}))}},{key:"_hideDeleteBtn",value:function(){this._owner._id!==this._userId&&(this._card.querySelector(".place__delete").style.display="none")}},{key:"_toggleLikeCard",value:function(e){e.classList.toggle("place__like_theme_like"),e.classList.toggle("place__like_theme_unlike")}},{key:"_checkIfCardLiked",value:function(){var e=this;return this._likes.some((function(t){return t._id===e._userId}))}},{key:"updateLikes",value:function(e,t){this._toggleLikeCard(t),this._card.querySelector(".place__like-counter").textContent=e}}])&&f(t.prototype,n),e}();function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var d=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=r,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"renderItems",value:function(e){var t=this;e.reverse().forEach((function(e){t._renderer(e)}))}}])&&h(t.prototype,n),e}();function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var y=function(){function e(t){var n=t.name,r=t.occupation,o=t.avatar;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(n),this._occupation=document.querySelector(r),this._avatar=document.querySelector(o)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){var e={};return e.name=this._name.textContent,e.occupation=this._occupation.textContent,e.id=this._id,e}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.occupation,r=e.id;this._name.textContent=t,this._occupation.textContent=n,this._id=r}},{key:"setAvatar",value:function(e){this._avatar.src=e}}])&&_(t.prototype,n),e}();function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var m=function(){function e(t){var n,r,o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=function(e){"Escape"===e.key&&o.close()},(n="_handleEscClose")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._popup=document.querySelector(t)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("click",(function(t){(t.target.classList.contains("popup__close")||!t.target.classList.contains("popup__container")&&t.target.classList.contains("popup"))&&e.close()}))}}])&&v(t.prototype,n),e}();function b(e){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},b(e)}function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function k(e,t,n){return k="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=E(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},k(e,t,n||e)}function w(e,t){return w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},w(e,t)}function S(e,t){if(t&&("object"===b(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function E(e){return E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},E(e)}var L=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=E(r);if(o){var n=E(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return S(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._image=t._popup.querySelector(".popup__image"),t._description=t._popup.querySelector(".popup__description"),t}return t=a,(n=[{key:"open",value:function(e){k(E(a.prototype),"open",this).call(this),this._image.src=e.src,this._description.textContent=e.alt}}])&&g(t.prototype,n),a}(m);function C(e){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},C(e)}function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function j(e,t,n){return j="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=R(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},j(e,t,n||e)}function P(e,t){return P=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},P(e,t)}function I(e,t){if(t&&("object"===C(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function R(e){return R=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},R(e)}var q=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&P(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=R(r);if(o){var n=R(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return I(this,e)});function a(e){var t,n=e.popupSelector,r=e.formSubmitHandler;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._formSubmitHandler=r,t._form=t._popup.querySelector(".popup__form"),t._submitButton=t._popup.querySelector(".popup__submit"),t}return t=a,(n=[{key:"_getInputValues",value:function(){var e=this._popup.querySelectorAll(".popup__input"),t={};return e.forEach((function(e){t[e.name]=e.value})),t}},{key:"setEventListeners",value:function(){var e=this;j(R(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._formSubmitHandler(e._getInputValues())}))}},{key:"close",value:function(){j(R(a.prototype),"close",this).call(this),this._form.reset()}},{key:"renderLoading",value:function(e){this._submitButton.textContent=e?"Saving...":"Save"}}])&&O(t.prototype,n),a}(m);function T(e){return T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},T(e)}function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function B(e,t,n){return B="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=A(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},B(e,t,n||e)}function x(e,t){return x=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},x(e,t)}function D(e,t){if(t&&("object"===T(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function A(e){return A=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},A(e)}var H=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&x(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=A(r);if(o){var n=A(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return D(this,e)});function a(e){var t,n=e.popupSelector,r=e.deleteHandler;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._deleteHandler=r,t}return t=a,(n=[{key:"setEventListeners",value:function(){var e=this;B(A(a.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("click",(function(t){"Yes"==t.target.textContent&&e._deleteHandler(e._id,e._card)}))}},{key:"setDeleteCard",value:function(e,t){this._id=e,this._card=t}}])&&U(t.prototype,n),a}(m);function V(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var F=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputError=t.inputError,this._errorClass=t.errorClass,this._formElement=n,this._inputList=this._formElement.querySelectorAll(this._inputSelector),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}var t,n;return t=e,(n=[{key:"enableValidation",value:function(){this._setEventListeners()}},{key:"_showInputError",value:function(e){var t=this._getErrorElement(e);e.classList.add(this._inputError),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(e){var t=this._getErrorElement(e);e.classList.remove(this._inputError),t.classList.remove(this._errorClass),t.textContent=""}},{key:"_getErrorElement",value:function(e){return this._formElement.querySelector("#".concat(e.id,"-error"))}},{key:"_isValid",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_hasInvalidInput",value:function(){return Array.from(this._inputList).some((function(e){return!e.validity.valid}))}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?this._buttonElement.classList.add(this._inactiveButtonClass):this._buttonElement.classList.remove(this._inactiveButtonClass)}},{key:"_setEventListeners",value:function(){var e=this;this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._isValid(t),e._toggleButtonState()}))}))}},{key:"resetFormValidation",value:function(){var e=this;this._inputList.forEach((function(t){e._hideInputError(t),e._buttonElement.classList.add(e._inactiveButtonClass)}))}}])&&V(t.prototype,n),e}();function N(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function J(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var M=new(function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"_checkResponse",value:function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}},{key:"getUserInfo",value:function(){var e=this;return fetch(this._baseUrl+"/users/me",{headers:this._headers}).then((function(t){return e._checkResponse(t)}))}},{key:"getInitialCards",value:function(){var e=this;return fetch(this._baseUrl+"/cards",{headers:this._headers}).then((function(t){return e._checkResponse(t)}))}},{key:"saveUserInfo",value:function(e,t){var n=this;return fetch(this._baseUrl+"/users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then((function(e){return n._checkResponse(e)}))}},{key:"saveCard",value:function(e,t){var n=this;return fetch(this._baseUrl+"/cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then((function(e){return n._checkResponse(e)}))}},{key:"deleteCard",value:function(e){var t=this;return fetch(this._baseUrl+"/cards/"+e,{method:"DELETE",headers:this._headers}).then((function(e){return t._checkResponse(e)}))}},{key:"addLike",value:function(e){var t=this;return fetch(this._baseUrl+"/cards/likes/"+e,{method:"PUT",headers:this._headers}).then((function(e){return t._checkResponse(e)}))}},{key:"removeLike",value:function(e){var t=this;return fetch(this._baseUrl+"/cards/likes/"+e,{method:"DELETE",headers:this._headers}).then((function(e){return t._checkResponse(e)}))}},{key:"updateProfilePicture",value:function(e){var t=this;return fetch(this._baseUrl+"/users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((function(e){return t._checkResponse(e)}))}}])&&N(t.prototype,n),e}())({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"8c2c5758-c6d8-42fc-a2ad-abb452a760a2","Content-Type":"application/json"}}),z=M.getUserInfo(),Y=M.getInitialCards(),$=new y({name:".profile__name",occupation:".profile__occupation",avatar:".profile__avatar"}),G=new q({popupSelector:".popup_window_avatar",formSubmitHandler:function(e){G.renderLoading(!0),M.updateProfilePicture(e.link).then((function(){$.setAvatar(e.link),G.close()})).catch((function(e){console.log("There was a problem updating the avatar ".concat(e))})).finally((function(){G.renderLoading(!1)}))}}),K=new q({popupSelector:".popup_window_edit",formSubmitHandler:function(e){K.renderLoading(!0),M.saveUserInfo(e.name,e.occupation).then((function(){$.setUserInfo(e),K.close()})).catch((function(e){console.log("There was a problem updating profile information ".concat(e))})).finally((function(){K.renderLoading(!1)}))}}),Q=new q({popupSelector:".popup_window_add",formSubmitHandler:function(e){Q.renderLoading(!0),M.saveCard(e.name,e.link).then((function(e){ne.addItem(re(e)),Q.close()})).catch((function(e){console.log("There was a problem adding this place ".concat(e))})).finally((function(){Q.renderLoading(!1)}))}}),W=new H({popupSelector:".popup_window_delete",deleteHandler:function(e,t){M.deleteCard(e).then((function(){t.remove(),t=null,W.close()})).catch((function(e){console.log("There was a problem deleteing this place ".concat(e))}))}}),X=new L(".popup_window_image"),Z=new F(e,i),ee=new F(e,c),te=new F(e,l),ne=new d({renderer:function(e){ne.addItem(re(e))}},".places__list"),re=function(e){var t=new p(e,"place",$.getUserInfo().id,(function(e){X.open(e.target)}),(function(e,t){W.open(),W.setDeleteCard(e,t)}),(function(n,r){n?M.addLike(e._id).then((function(e){t.updateLikes(e.likes.length,r)})).catch((function(e){console.log("There was a problem adding the like ".concat(e))})):M.removeLike(e._id).then((function(e){t.updateLikes(e.likes.length,r)})).catch((function(e){console.log("There was a problem removing the like ".concat(e))}))}));return t.generateCard()};Promise.all([z,Y]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){c=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(c)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return J(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?J(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];$.setUserInfo({name:o.name,occupation:o.about,id:o._id}),$.setAvatar(o.avatar),ne.renderItems(i)})).catch((function(e){console.log("failed to load data from the server ".concat(e))})),G.setEventListeners(),K.setEventListeners(),Q.setEventListeners(),W.setEventListeners(),X.setEventListeners(),Z.enableValidation(),ee.enableValidation(),te.enableValidation(),n.addEventListener("click",(function(){Z.resetFormValidation(),G.open()})),r.addEventListener("click",(function(){ee.resetFormValidation(),u.value=$.getUserInfo().name,s.value=$.getUserInfo().occupation,K.open()})),o.addEventListener("click",(function(){te.resetFormValidation(),Q.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,